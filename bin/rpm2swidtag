#!/usr/bin/python3

from sys import argv, exit, stderr, stdout
from os import getenv
from rpm2swidtag import Template, Error, rpm
import argparse

parser = argparse.ArgumentParser(description='SWID tag parameters.')
parser.add_argument('-p', '--package', dest='rpmfile', action='store_true', help='process rpm package file')
parser.add_argument('--regid', type=str, help="tag creator's regid")
parser.add_argument('package', type=str, nargs='+', help='package or file name')
opts = parser.parse_args()

DATA_DIR = "/etc/rpm2swidtag"
template = None
try:
	data_dir = getenv('RPM2SWIDTAG_TEMPLATE_DIR', DATA_DIR)
	xml_template = getenv('RPM2SWIDTAG_TEMPLATE', data_dir + "/template.swidtag")
	xslt_file = getenv('RPM2SWIDTAG_XSLT', data_dir + "/rpm2swidtag.xslt")
	template = Template(xml_template, xslt_file)
except Error as e:
	stderr.write("%s: %s\n" % (argv[0], e.strerror))
	exit(5)

exit_status = 0
for p in opts.package:
	l = []
	msg = "for file [%s]" % p
	if opts.rpmfile:
		try:
			l = [ rpm.read_from_file(p) ]
		except Error as e:
			stderr.write("%s: %s\n" % (argv[0], e.strerror))
			exit(3)
	else:
		msg = "for package [%s]" % p
		try:
			# We only assume the use of _RPM2SWIDTAG_RPMDBPATH for testing, really
			l = rpm.read_from_db(p, rpmdb_path=getenv('_RPM2SWIDTAG_RPMDBPATH'))
			if len(l) < 1:
				stderr.write("%s: No package [%s] found in database\n" % (argv[0], p))
				exit_status = 7
		except Error as e:
			stderr.write("%s: %s\n" % (argv[0], e.strerror))
			exit(3)

	for h in l:
		try:
			params = {}
			if opts.regid:
				params['tagcreator-regid'] = opts.regid
			tag = template.generate_tag_for_header(h, params=params)
			stdout.write(tag.tostring().decode())
		except Error as e:
			stderr.write("%s: Error generating SWID tag %s: %s\n" % (argv[0], msg, e.strerror))
			exit(6)

exit(exit_status)
