#!/usr/bin/python3

from sys import argv, exit, stderr, stdout
from os import getenv, path, makedirs
from io import BytesIO
from rpm2swidtag import Template, Error, rpm
import argparse

parser = argparse.ArgumentParser(description='SWID tag parameters.')
group = parser.add_mutually_exclusive_group()
group.add_argument('-a', '--all', dest='all', action='store_true', help='query all packages with glob pattern')
group.add_argument('-p', '--package', dest='rpmfile', action='store_true', help='process rpm package file')
parser.add_argument('--regid', type=str, help="tag creator's regid")
parser.add_argument('--output-dir', type=str, help="write SWID tags to files under regid subdirectory of this directory")
parser.add_argument('--print-tagid', action='store_true', help="compute and print tagId(s) to standard output")
parser.add_argument('package', type=str, nargs=argparse.REMAINDER, help='package(s), glob(s) or file name(s)', metavar='...')
opts = parser.parse_args()

DATA_DIR = "/etc/rpm2swidtag"
template = None
try:
	data_dir = getenv('RPM2SWIDTAG_TEMPLATE_DIR', DATA_DIR)
	xml_template = getenv('RPM2SWIDTAG_TEMPLATE', data_dir + "/template.swidtag")
	if opts.print_tagid:
		xslt_file = getenv('RPM2SWIDTAG_XSLT', data_dir + "/rpm2swidtag-tagid.xslt")
	else:
		xslt_file = getenv('RPM2SWIDTAG_XSLT', data_dir + "/rpm2swidtag.xslt")
	template = Template(xml_template, xslt_file)
except Error as e:
	stderr.write("%s: %s\n" % (argv[0], e.strerror))
	exit(5)

if opts.all and not opts.package:
	opts.package = [ '*' ]

exit_status = 0
for p in opts.package:
	l = []
	msg = "for file [%s]" % p
	if opts.rpmfile:
		try:
			l = [ rpm.read_from_file(p) ]
		except Error as e:
			stderr.write("%s: %s\n" % (argv[0], e.strerror))
			exit(3)
	else:
		msg = "for package [%s]" % p
		try:
			# We only assume the use of _RPM2SWIDTAG_RPMDBPATH for testing, really
			l = rpm.read_from_db(p, rpmdb_path=getenv('_RPM2SWIDTAG_RPMDBPATH'), glob=opts.all)
			if len(l) < 1:
				stderr.write("%s: No package [%s] found in database\n" % (argv[0], p))
				exit_status = 7
		except Error as e:
			stderr.write("%s: %s\n" % (argv[0], e.strerror))
			exit(3)

	for h in l:
		try:
			params = {}
			if opts.regid:
				params['tagcreator-regid'] = opts.regid
			tag = template.generate_tag_for_header(h, params=params)
			if opts.output_dir and not opts.print_tagid:
				dir = opts.output_dir + '/' + tag.get_tagcreator_regid()
				if not path.exists(dir):
					makedirs(dir)
				tag.write_output(dir + '/' + tag.get_tagid() + '.swidtag')
			else:
				f = BytesIO(None)
				tag.write_output(f)
				stdout.write(f.getvalue().decode())
		except Error as e:
			stderr.write("%s: Error generating SWID tag %s: %s\n" % (argv[0], msg, e.strerror))
			exit(6)

exit(exit_status)
