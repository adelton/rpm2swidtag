#!/usr/bin/python3

from sys import argv, exit, stderr
import argparse
from configparser import ConfigParser
import re
from fnmatch import translate
from glob import iglob
from os.path import isfile, isdir
from swidq import SWIDTag

CONFIG_FILE = "/etc/swid/swidq.conf"
SWIDTAGS_DIRS = "/etc/swid/swidtags.d/*"

parser = argparse.ArgumentParser(description='List SWID tags.')
parser.add_argument('--debug', action='store_true', help="verbose debugging messages")
parser.add_argument('-a', '--all', dest='all', action='store_true', help="match tagId with glob pattern, default '*'")
parser.add_argument('-p', '--paths', action='store_true', help="process listed directories and SWID tag files")
parser.add_argument('-c', '--config', default=CONFIG_FILE, metavar='FILE', help="location of the configuration file")
parser.add_argument('match', type=str, nargs='*', help='tagIds or paths, depending on the selection option', metavar='...')
opts = parser.parse_args()

config = ConfigParser(delimiters = '=', comment_prefixes = '#')
config['swidq'] = { 'dir': SWIDTAGS_DIRS }
config.read(opts.config)
if opts.debug:
	stderr.write("%s: config file [%s]\n" % (argv[0], opts.config))
	for s in config.sections():
		stderr.write("%s: config data [%s]\n" % (argv[0], s))
		for k in config[s].keys():
			stderr.write("%s: config data %s = %s\n" % (argv[0], k, config[s][k]))

exit_status = 0

def load_file(f):
	if opts.debug:
		stderr.write("%s: parsing [%s]\n" % (argv[0], f))
	tag = SWIDTag(f)
	errors = tag.get_errors()
	if errors is not None:
		for e in errors:
			stderr.write("%s: %s\n" % (argv[0], e))
		return

	if opts.debug:
		stderr.write("%s: %s\n" % (argv[0], tag.get_info()))

	matched = False
	if opts.paths:
		matched = True
	elif opts.all and len(opts.match) == 0:
		matched = True
	elif len(opts.match) > 0:
		tagid = tag.get_tagid()
		if opts.all:
			for t in opts.match:
				if re.compile(translate(t)).match(tagid):
					matched = True
					break
		elif tagid in opts.match:
			matched = True

	if matched:
		print("%s %s" % (tag.get_tagid(), tag.get_path()))

dirs = None
if opts.paths:
	dirs = opts.match

if dirs is None:
	d = config.get('swidq', 'dir')
	if d == '':
		stderr.write("%s: no dir configured in [%s]\n" % (argv[0], opts.config))
		exit(2)
	dirs = re.split(r' +', d)

for f in dirs:
	if isfile(f) or f == '-':
		load_file(f)
	else:
		fg = sorted(iglob(f))
		if not fg:
			stderr.write("%s: no file matching [%s]\n" % (argv[0], f))
			exit_status = 1
		for g in fg:
			if isdir(g):
				for gg in sorted(iglob(g + "/*.swidtag")):
					load_file(gg)
			else:
				load_file(g)

if opts.debug:
	stderr.write("%s: exitting.\n" % argv[0])

exit(exit_status)
