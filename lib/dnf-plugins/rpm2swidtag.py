
from dnf.cli import commands

import argparse
import platform

from dnf import Plugin
from dnfpluginscore import logger
from subprocess import run, PIPE
import platform
from os import path, makedirs
import re
from rpm2swidtag import repodata

class rpm2swidtagCommand(commands.Command):
	aliases = [ "rpm2swidtag" ]
	summary = "Generate SWID tag files for installed rpms"

	name = 'rpm2swidtag'
	dirname = "%s-generated" % name
	dir = "var/lib/swidtag"
	dir_generated = path.join(dir, "%s-generated" % name)
	swidtags_d = "etc/swid/swidtags.d"
	swidtags_d_symlink = path.join(swidtags_d, dirname)

	RPM2SWIDTAG = "/usr/bin/rpm2swidtag"
	UNLINK = "/usr/bin/rm"

	def __init__(self, cli):
		super(rpm2swidtagCommand, self).__init__(cli)
		root = self.base.conf.installroot
		if not root:
			root = "/"
		self.dir_generated = path.join(root, self.dir_generated)
		self.swidtags_d = path.join(root, self.swidtags_d)
		self.swidtags_d_symlink = path.join(root, self.swidtags_d_symlink)

	def configure(self):
		self.cli.demands.available_repos = False
		self.cli.demands.sack_activation = False
		self.cli.demands.resolving = False
		self.cli.demands.root_user = True

	@staticmethod
	def set_argparser(parser):
		subparser = parser.add_subparsers(parser_class=argparse.ArgumentParser, dest="rpm2swidtagcmd")
		subparser.add_parser("enable", help="enable rpm2swidtag plugin")
		subparser.add_parser("enable-regen", help="enable + generate SWID tags for already installed rpms")
		subparser.add_parser("disable", help="disable rpm2swidtag plugin")
		subparser.add_parser("disable-purge", help="disable + remove all tags generated by rpm2swidtag plugin")

	def run(self):
		if self.opts.rpm2swidtagcmd in ( "enable", "enable-regen" ):
			if self.opts.rpm2swidtagcmd == "enable-regen":
				self._purge_dir()
				hostname = platform.uname()[1]
				print("Running %s --all ..." % self.RPM2SWIDTAG)
				run([self.RPM2SWIDTAG, "--tag-creator", hostname, "--output-dir", path.join(self.dir_generated, "."), "--all"])
			elif not path.isdir(self.dir_generated):
				makedirs(self.dir_generated)
			if not path.islink(self.swidtags_d_symlink):
				if not path.exists(self.swidtags_d):
					makedirs(self.swidtags_d)
				self._symlink(self.dir_generated, self.swidtags_d_symlink)
		elif self.opts.rpm2swidtagcmd in ( "disable", "disable-purge" ):
			if self.opts.rpm2swidtagcmd == "disable-purge" and path.isdir(self.dir_generated):
				self._purge_dir()
			if path.islink(self.swidtags_d_symlink):
				self._unlink(self.swidtags_d_symlink)
		else:
			print("dnf rpm2swidtag [enable | enable-regen | disable | disable-purge]")

	@staticmethod
	def _unlink(file):
		run([__class__.UNLINK, "-v", file])

	def _purge_dir(self):
		run([self.UNLINK, "-fr", self.dir_generated])

	@staticmethod
	def _symlink(dest, src):
		run(["/usr/bin/ln", "-sv", dest, src])

class rpm2swidtag(Plugin):

	name = rpm2swidtagCommand.name
	dir = rpm2swidtagCommand.dir
	dir_generated = rpm2swidtagCommand.dir_generated
	swidtags_d = rpm2swidtagCommand.swidtags_d
	swidtags_d_symlink = rpm2swidtagCommand.swidtags_d_symlink

	METADATA_TYPE = "swidtags"

	RPM2SWIDTAG = rpm2swidtagCommand.RPM2SWIDTAG
	SWIDQ = "/usr/bin/swidq"

	def __init__(self, base, cli):
		super().__init__(base, cli)
		self.install_set = None
		self.remove_set = None
		root = base.conf.installroot
		if not root:
			root = "/"
		self.dir = path.join(root, self.dir)
		self.dir_generated = path.join(root, self.dir_generated)
		self.swidtags_d = path.join(root, self.swidtags_d)
		self.swidtags_d_symlink = path.join(root, self.swidtags_d_symlink)
		if cli:
			cli.register_command(rpm2swidtagCommand)

	def config(self):
		super(rpm2swidtag, self).config()
		for repo in self.base.repos.iter_enabled():
			if hasattr(repo, "add_metadata_type_to_download"):
				logger.debug("Will ask for SWID tags download for " + str(repo.baseurl))
				repo.add_metadata_type_to_download(self.METADATA_TYPE)

	def resolved(self):
		self.install_set = self.base.transaction.install_set
		self.remove_set = self.base.transaction.remove_set

	def transaction(self):
		if not path.islink(self.swidtags_d_symlink) or not path.isdir(self.swidtags_d_symlink):
			return

		hostname = platform.uname()[1]
		downloaded_swidtags = {}
		dirs = {}
		for i in self.install_set:
			r = i.repo
			if r not in downloaded_swidtags:
				downloaded_swidtags[r] = None
				if hasattr(r, "get_metadata_path"):
					file = r.get_metadata_path(self.METADATA_TYPE)
					if file and file != "":
						downloaded_swidtags[r] = repodata.Swidtags(None, file)
			if downloaded_swidtags[r]:
				tags = downloaded_swidtags[r].value_for(i.location)
				if tags is not None:
					for d in tags:
						full_d = path.join(self.dir, d)
						if full_d not in dirs and not path.isdir(full_d):
							makedirs(full_d)
						dirs[full_d] = d
						for t in tags[d]:
							logger.debug("Retrieved SWID tag from repodata for %s: %s/%s" % (i, d, t))
							tags[d][t].write(path.join(full_d, t + ".swidtag"), xml_declaration=True, encoding="utf-8", pretty_print=True)
					continue
			logger.debug('Will rpm2swidtag for %s' % i)
			if run([self.RPM2SWIDTAG, "--tag-creator", hostname, "--output-dir", path.join(self.dir_generated, "."), str(i)]).returncode == 0:
				run([self.SWIDQ, "--silent", "--rpm", str(i)])

		for full_d in dirs:
			rpm2swidtagCommand._symlink(full_d, path.join(self.swidtags_d, dirs[full_d]))

		for i in self.remove_set:
			logger.debug('Will remove rpm2swidtag-generated .swidtag for %s' % i)
			swidtag = run([self.SWIDQ, "--rpm", str(i)], stdout=PIPE, encoding="utf-8")
			if swidtag.returncode != 0:
				continue
			for l in swidtag.stdout.splitlines():
				m = re.search(r'^(\S+) (\S+)$', l)
				if not m:
					continue
				rpm2swidtagCommand._unlink(m.group(2))
				component_of = run([self.SWIDQ, "-a", m.group(1) + "-component-of-*"], stdout=PIPE, encoding="utf-8")
				if component_of.returncode != 0:
					continue
				for ll in component_of.stdout.splitlines():
					m = re.search(r'^- (\S+) (\S+)$', ll)
					if not m:
						continue
					rpm2swidtagCommand._unlink(m.group(2))

