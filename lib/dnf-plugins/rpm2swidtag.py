
from dnf.cli import commands

import argparse
import platform

from dnf import Plugin
from dnfpluginscore import logger
from subprocess import run, PIPE
import platform
from os import path, makedirs, environ
import re
from rpm2swidtag import repodata
from configparser import ConfigParser

NAME = "rpm2swidtag"
RPM2SWIDTAG_COMMAND = "/usr/bin/rpm2swidtag"
SWIDQ_COMMAND = "/usr/bin/swidq"
UNLINK = "/usr/bin/rm"
SYMLINK = "/usr/bin/ln"

SWIDTAG_DIR = "var/lib/swidtag"
SWIDTAGS_D = "etc/swid/swidtags.d"

class rpm2swidtagCommand(commands.Command):
	aliases = [ NAME ]
	summary = "Generate SWID tag files for installed rpms"

	plugin = None

	def __init__(self, cli):
		super(rpm2swidtagCommand, self).__init__(cli)
		for p in self.base._plugins.plugins:
			if p.name == NAME:
				self.plugin = p
				break
		if not self.plugin:
			logger.error("Internal error: cannot find the plugin from command.")
			return

	def configure(self):
		self.cli.demands.available_repos = False
		self.cli.demands.sack_activation = False
		self.cli.demands.resolving = False
		self.cli.demands.root_user = True

	@staticmethod
	def set_argparser(parser):
		subparser = parser.add_subparsers(parser_class=argparse.ArgumentParser, dest="rpm2swidtagcmd")
		subparser.add_parser("regen", help="generate SWID tags for already installed rpms")
		subparser.add_parser("purge", help="remove all tags generated by rpm2swidtag plugin")

	def run(self):
		if self.opts.rpm2swidtagcmd == "regen":
			self.plugin.purge_generated_dir()
			self.plugin.run_rpm2swidtag_for(["--all"])
		elif self.opts.rpm2swidtagcmd == "purge":
			self.plugin.purge_generated_dir()
			self.plugin.purge_generated_symlink()
		else:
			print("dnf rpm2swidtag [regen | purge]")

class rpm2swidtag(Plugin):

	name = NAME
	generated_dirname = "%s-generated" % NAME

	METADATA_TYPE = "swidtags"

	def __init__(self, base, cli):
		super().__init__(base, cli)
		self.conf = None
		self.install_set = None
		self.remove_set = None
		root = base.conf.installroot
		self.dir = path.join(root, SWIDTAG_DIR)
		self.dir_generated = path.join(self.dir, self.generated_dirname)
		self.swidtags_d = path.join(root, SWIDTAGS_D)
		if cli:
			cli.register_command(rpm2swidtagCommand)

	def config(self):
		super(rpm2swidtag, self).config()
		self.conf = self.read_config(self.base.conf)
		DEFAULTS = { "main": {
			"rpm2swidtag_command": RPM2SWIDTAG_COMMAND,
			"swidq_command": SWIDQ_COMMAND,
			}
		}
		for s in DEFAULTS:
			if not self.conf.has_section(s):
				self.conf.add_section(s)
			for o in DEFAULTS[s]:
				if not self.conf.has_option(s, o):
					self.conf.data[s][o] = DEFAULTS[s][o]

		for repo in self.base.repos.iter_enabled():
			if hasattr(repo, "add_metadata_type_to_download"):
				logger.debug("Will ask for SWID tags download for " + str(repo.baseurl))
				repo.add_metadata_type_to_download(self.METADATA_TYPE)

	def resolved(self):
		self.install_set = self.base.transaction.install_set
		self.remove_set = self.base.transaction.remove_set

	def transaction(self):
		hostname = platform.uname()[1]
		downloaded_swidtags = {}
		dirs = {}
		for i in self.install_set:
			r = i.repo
			if r not in downloaded_swidtags:
				downloaded_swidtags[r] = None
				if hasattr(r, "get_metadata_path"):
					file = r.get_metadata_path(self.METADATA_TYPE)
					if file and file != "":
						downloaded_swidtags[r] = repodata.Swidtags(None, file)
			if downloaded_swidtags[r]:
				tags = downloaded_swidtags[r].value_for(i.location)
				if tags is not None:
					for d in tags:
						full_d = path.join(self.dir, d)
						if full_d not in dirs:
							self.create_generated_dir(d)
						dirs[full_d] = d
						for t in tags[d]:
							logger.debug("Retrieved SWID tag from repodata for %s: %s/%s" % (i, d, t))
							tags[d][t].write(path.join(full_d, t + ".swidtag"), xml_declaration=True, encoding="utf-8", pretty_print=True)
					continue
			logger.debug('Will rpm2swidtag for %s' % i)
			if self.run_rpm2swidtag_for([str(i)]) == 0:
				if run(self.conf.get("main", "swidq_command").split() + ["--silent", "-p", path.join(self.base.conf.installroot, SWIDTAG_DIR, self.generated_dirname, "*"), "--rpm", str(i)]).returncode != 0:
					logger.warn("The SWID tag for rpm %s should have been generated but could not be found" % str(i))

		for full_d in dirs:
			self.create_swidtags_d_symlink(dirs[full_d])

		for i in self.remove_set:
			logger.debug('Will remove SWID tag for %s' % i)
			swidtag = run(self.conf.get("main", "swidq_command").split() + ["-p", path.join(self.base.conf.installroot, SWIDTAGS_D, "*"), "--rpm", str(i)], stdout=PIPE, encoding="utf-8")
			if swidtag.returncode != 0:
				continue
			for l in swidtag.stdout.splitlines():
				m = re.search(r'^(\S+) (\S+)$', l)
				if not m:
					continue
				self.remove_file(m.group(2))
				component_of = run(self.conf.get("main", "swidq_command").split() + ["-p", path.join(self.base.conf.installroot, SWIDTAGS_D, "*"), "-a", m.group(1) + "-component-of-*"], stdout=PIPE, encoding="utf-8")
				if component_of.returncode != 0:
					continue
				for ll in component_of.stdout.splitlines():
					m = re.search(r'^- (\S+) (\S+)$', ll)
					if not m:
						continue
					self.remove_file(m.group(2))

	def remove_file(self, file):
		run([UNLINK, "-f", file])

	def purge_generated_dir(self):
		run([UNLINK, "-fr", self.dir_generated])

	def purge_generated_symlink(self):
		run([UNLINK, "-f", path.join(self.swidtags_d, self.generated_dirname)])

	def create_generated_dir(self, dir=None):
		if dir:
			dir = path.join(self.dir, dir)
		else:
			dir = self.dir_generated
		if not path.isdir(dir):
			makedirs(dir)

	def create_swidtags_d_symlink(self, basename=None):
		if not basename:
			basename = self.generated_dirname
		if not path.isdir(self.swidtags_d):
			makedirs(self.swidtags_d)
		src = path.join(self.swidtags_d, basename)
		if not path.islink(src):
			run([SYMLINK, "-sv", path.join("../../..", SWIDTAG_DIR, basename), src])

	def run_rpm2swidtag_for(self, pkgs):
		if not pkgs or len(pkgs) < 1:
			return
		hostname = platform.uname()[1]
		rpm2swidtag_command = self.conf.get("main", "rpm2swidtag_command")
		print("Running %s for %s ..." % (rpm2swidtag_command, pkgs))
		env = { "_RPM2SWIDTAG_RPMDBPATH": path.join(self.base.conf.installroot, "var/lib/rpm") }
		if "PYTHONPATH" in environ:
			env["PYTHONPATH"] = environ["PYTHONPATH"]
		ret = run(rpm2swidtag_command.split() + ["--tag-creator", hostname, "--output-dir", path.join(self.dir_generated, ".")] + pkgs,
			env=env).returncode
		self.create_generated_dir()
		self.create_swidtags_d_symlink()
		return ret
